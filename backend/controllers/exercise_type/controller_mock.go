// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go

// Package exercise_type is a generated GoMock package.
package exercise_type

import (
	reflect "reflect"

	types "Logger.Fitness/go-libs/types"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockDatabaseInterface is a mock of DatabaseInterface interface.
type MockDatabaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseInterfaceMockRecorder
}

// MockDatabaseInterfaceMockRecorder is the mock recorder for MockDatabaseInterface.
type MockDatabaseInterfaceMockRecorder struct {
	mock *MockDatabaseInterface
}

// NewMockDatabaseInterface creates a new mock instance.
func NewMockDatabaseInterface(ctrl *gomock.Controller) *MockDatabaseInterface {
	mock := &MockDatabaseInterface{ctrl: ctrl}
	mock.recorder = &MockDatabaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseInterface) EXPECT() *MockDatabaseInterfaceMockRecorder {
	return m.recorder
}

// DeleteExerciseTypeByID mocks base method.
func (m *MockDatabaseInterface) DeleteExerciseTypeByID(exerciseTypeID, userID primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExerciseTypeByID", exerciseTypeID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExerciseTypeByID indicates an expected call of DeleteExerciseTypeByID.
func (mr *MockDatabaseInterfaceMockRecorder) DeleteExerciseTypeByID(exerciseTypeID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExerciseTypeByID", reflect.TypeOf((*MockDatabaseInterface)(nil).DeleteExerciseTypeByID), exerciseTypeID, userID)
}

// GetExerciseTypesByUserID mocks base method.
func (m *MockDatabaseInterface) GetExerciseTypesByUserID(userID primitive.ObjectID) ([]types.ExerciseType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExerciseTypesByUserID", userID)
	ret0, _ := ret[0].([]types.ExerciseType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExerciseTypesByUserID indicates an expected call of GetExerciseTypesByUserID.
func (mr *MockDatabaseInterfaceMockRecorder) GetExerciseTypesByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExerciseTypesByUserID", reflect.TypeOf((*MockDatabaseInterface)(nil).GetExerciseTypesByUserID), userID)
}

// InsertNewExerciseType mocks base method.
func (m *MockDatabaseInterface) InsertNewExerciseType(exerciseType types.ExerciseType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewExerciseType", exerciseType)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNewExerciseType indicates an expected call of InsertNewExerciseType.
func (mr *MockDatabaseInterfaceMockRecorder) InsertNewExerciseType(exerciseType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewExerciseType", reflect.TypeOf((*MockDatabaseInterface)(nil).InsertNewExerciseType), exerciseType)
}

// UpdateExerciseType mocks base method.
func (m *MockDatabaseInterface) UpdateExerciseType(userID primitive.ObjectID, exerciseType types.ExerciseType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExerciseType", userID, exerciseType)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExerciseType indicates an expected call of UpdateExerciseType.
func (mr *MockDatabaseInterfaceMockRecorder) UpdateExerciseType(userID, exerciseType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExerciseType", reflect.TypeOf((*MockDatabaseInterface)(nil).UpdateExerciseType), userID, exerciseType)
}
